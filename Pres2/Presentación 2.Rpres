Curso introductorio a R - Elementos y funciones básicas
========================================================
author: José Manuel Proudinat Silva

jmps2812@gmail.com

@JosmanPS

GitHub: JosmanPS

Directorio de trabajo
================
Antes que nada, siempre es importante especificar el directorio donde se guardará nuestro trabajo.
```{r}
# Para ver en qué directorio nos encontramos actualmente
getwd()

# Para especificar un directorio de trabajo distinto
setwd("/Users/josmanps/REPOS/Curso-R-ITAM/Pres2")
```

Asignación de variables e impresión
========

Para asginar variables utilizamos <-, también podemos usar "=" pero espreferible la primera manera
```{r}
text <- "El valor de Pi es: "
value <- pi
```

R es lenguaje orientado a objetos, donde cada variable es un objeto con una clase específica. Las clases de los objetos determinan qué funciones pueden aplicarse a ellos.
```{r}
class(text)
```

=========
```{r}
class(value)
```

Cuando queremos imprimir el valor de una variable podemos usar la función `print()`o simplemento escribir el nombre de la variable.
```{r}
print(value)
value
```

========
Podemos imprimir múltiples variables del siguiente modo:
```{r}
print(text); print(value)
cat(text, value, "\n")
```

=========
Si queremos conocer todas las variables que tenemos en nuestro entorno usamos la siguiente función:
```{r}
ls()
```
O simplemente observamos en la ventana Envrionment de RStudio.

=========
Si queremos eliminar alguna variable en el entorno, utilizamos la función `rm()`.
```{r}
rm("value")
ls() # Observamos que la variable value ya no aparece

```

Vectores
=======================
Para crear vectores utilizamos la función `c()`.
```{r}
c(1, 2, 3) # Vector numérico
c("apple", "orange", "banana") # Vector de caracteres
c(TRUE, FALSE, FALSE) # Vector de tipo booleano
```

===============
Podemos unir vectores con la misma función `c()`.
```{r}
v1 <- c(1, 2, 3)
v2 <- c(4, 5, 6)
c(v1, v2)
v1 <- c("A", "B", "C")
v2 <- c(1, 2, 3)
c(v1, v2)
```

Algunas funciones básicas
===================
```{r}
# Generamos datos a partir de una distribución normal
x <- rnorm(n = 20)
x <- rnorm(20) # Default: mean = 0, sd = 1
y <- rnorm(n = 20, mean = 2, sd = 3)
```

====
```{r}
# Cargamos un paquete
library("ggplot2")
qplot(x, y) # Gráfica rápida del paquete ggplot2
```

====
```{r}
mean(x) # media
median(x) # mediana
var(x) # varianza
```

========
```{r}
sd(x) # desviación estándar
cor(x, y) # Correlación
cov(x, y) # Covarianza
```

Comparaciones entre vectores
===================
A la hora de hacer operadores lógicos necesitamos saber como comparar vectores. Para ello es necesario conocer los operadores lógicos en R y algunas funciones que nos simplificaran muchas comparaciones.
```{r}
# Operadores lógicos
x <- 1
x == 0 # Igualdad
x != 0 # Desigualdad
```

=======
```{r}
x < 0 # Menor que
x > 0 # Mayor que
x <= 0
x >= 0
```

=========
Ahora veamos qué sucede con vectores.
```{r}
x <- c("A", "B", "C")
y <- c("A", "C", "B")
x == y
x != y
x < y
```

=========
```{r}
x > y
x <= y
x >= y
```

=========
```{r}
# Si nos interesa saber si algun elemento coinciden
any(x == y)

# Si queremos saber si todos los elementos coinciden
all(x == y)
```


Operaciones con bases de datos
===============
```{r, eval=FALSE}
data() # Nos muestra las bases de datos de muestra que trae R
```
```{r}
data(USArrests) # LLamamos a la base de datos
data <- USArrests # Asignamos los datos a la variable 'data'
head(data) # Vemos los primeros valores de la base
```


==============
Cuando queremos aplicar funciones a estructuras de datos más sofisticadas que vectores, usamos la función `apply()`.
```{r}
# Aplicamos algunas funciones a los datos
apply(data, 2, mean) 
# El valor 2 en apply() indica que queremos aplicar la función a las columnas, si escribieramos 1, indicaría que se aplica a los renglones 
```

===========
```{r}
var(data) # Matriz de varianzas y covarianzas
cor(data) # Matriz de correlaciones
```


Secuencias
=============
Las secuencias son muy importantes ya que nos permiten tener mejor control de los índices en matrices y vectores. Mostraremos unos ejemplos:
```{r}
# Secuencia simple
seq(from = 1, to = 10)
# Lo anterior es equivalente a hacer
1:10
```

===========
Si queremos que el intervalo entre cada elemento sea distinto de 1, necesitamos hacer lo siguiente:
```{r}
seq(from = 1, to = 11, by = 2)
```

=============
La función `rep()`es muy útil a la hora de escribir secuencias que se repitan.
```{r}
# Repetir un elemento
rep(1, times = 10)

# Podemos repetir un vector o secuencia
rep(c(1,2,3), times = 3)
```

=========
```{r}
# Podemos hacer que cada elemento de un vector o secuencia se repitan 
rep(c(1,2,3), each = 3)

# Podemos crear una secuencia de un valor a otro indicando el tamaño
seq(from = 1, to = 2, length.out = 5)
```

Selección de elementos en vectores y matrices
=============
En esta sección mostraremos distintas formas de seleccionar muestras de vectores y matrices segun la tarea o la necesidad que tengamos. Primero veremos como funciona con **vectores**:
```{r}
pares <- 2 * 1:10 # Creamos un vector

# Vemos algunos de sus elementos individuales. Para esto solo indicamos en un [ ] el valor que deseamos
pares[1]
```

====
```{r}
pares[2]
```
Podemos obtener múltiples valores, indicando una secuencia de las posiciones o un vector indicador:
```{r}
pares[1:3]
pares[c(2, 3, 6)]
```

========
Podemos también indicar que valores sean los que no se muestran del total de elementos, indicando las posiciones en valor negativo.
```{r}
pares[-1]      # Quita el primer elemento
pares[- (1:3)] # Quita los primeros 3 elementos
pares[- c(2, 3, 6)] # Quita los elementos indicados
```

========
También se puede indicar que valores queremos ver a través de vectores lógicos.
```{r}
pares > 10
pares[pares > 10]
```

========
Haciendo un poco más de estadística, retomemos la base de datos que teníamos anteriormente:
```{r}
str(data)
```

=====
Tomaremos un vector de nuestra base de datos y seleccionaremos elementos que nos interesan de él con un enfoque más estadístico:
```{r}
murder <- data$Murder  # Seleccionamos el vector de datos 'murder'
summary(murder)
```

=======
```{r}
murder[murder > mean(murder)] # Valores mayores que la media
murder[murder > median(murder)] # Valores mayores que la mediana
```

=======
```{r}
# Valores en el primer o último decil
murder[murder < quantile(murder, 0.1) | murder > quantile(murder, 0.9)] # Notar que usamos | como 'or'

# Valores entre el tercer y quinto decil
murder[murder > quantile(murder, 0.3) & murder < quantile(murder, 0.5)]
```

=====
```{r}
# Añadiremos algunos valores faltantes
murder[c(1, 3, 9, 32, 48, 11, 21, 30)] <- NA

# Podemos usar la selección de elementos para quitar los valores faltantes o valores nulos
murder[!is.na(murder) & !is.null(murder)]  # El signo ! indica que se tome el valor lógico contrario, en este caso no queremos saber los valores faltantes o nulos, sino los que no lo son, por eso usamos !
```

======
A la hora de hacer selección de elementos en matrices o bases de datos, se aplica la misma lógica que cuando se hace con vectores. La diferencia radica en que las matrices tienen posiciones del estilo [i,j] de sus elementos.
```{r}
# Algunos ejemplos
data[15, 3] # Nos da el valor del individuo 15 en la variable 3
```
```{r, eval=FALSE}
# Podemos seleccionar una columna completa
data[ ,2]
data[ ,c(2,3)] # Más de una columna
```

=====
```{r}
# Seleccionamos un grupo de individuos
data[1:5, ]  # Los primeros 5 individuos

data[1:5, c(2,4)] # Los primeros 5 individuos y solo las variables 2 y 4
```

====
```{r}
# Podemos seleccionar por nombre
data["Arizona", c("Assault", "Rape")]
```
En fin, cualquier forma que utilizamos para seleccionar elementos en vectores puede usarse al seleccionar elementos de matrices. Solo debemos recordar indicar tanto para i como para j el criterio de selección que se usará.


Operaciones matriciales
=========
Queremos mostrar ahora, como funcionan las operaciones binarias entre vectores y matrices. Lo primero que hay que observar es que los operadores comunes +, -, *, / no operan como está definido en matemáticas para vectores y matrices, sino que hacen las operaciones elemento por elemento.
```{r}
A <- matrix(c(1,2,3,4), 2, 2)
I <- diag(1,2)
A
```

========
```{r}
I
A * I
```
Con este ejemplo podemos observar que son necesarias otros operadores binarios para trabajar de la forma convencional en que se hace con vectores y matrices. Sin embargo, estas operaciones también nos pueden ser útiles.

======
Veamos algunos ejemplos de estas operaciones:
```{r}
u <- c(1,2,3,4)
v <- c(5,6,7,8)

u + v
v - u
u * v
```

========
```{r}
u / v
u ^ v

```

======
También podemos hacer operaciones entre escalares y vectores de esta forma.
```{r}
u + 3
u - 1
u * 2
```

======
```{r}
u / 2
u ^ 2
2 ^ u
```

=====
Con esto ya podríamos estandarizar un vector de datos.
```{r, fig=TRUE}
u <- data$Assault
u <- (u - mean(u)) / sd(u)
ggplot(as.data.frame(u), aes(x = u)) + geom_density() + geom_vline(aes(mean(u)))
```

=====
Algunas otras operaciones
```{r}
c(2, 3) %% 2  # Módulo
c(3,4,5) %/% 2 # División entera
c(2,3) %in% c(3,4,5) # Busca que el elemento esté en el vector
```

Operaciones con matrices
======
Ahora veamos operadores aplicados a matrices:
```{r}
A <- matrix(c(1,2,3,4), 2, 2)
A
t(A) # Matriz transpuesta
```

======
```{r}
solve(A) # Matriz inversa
A %*% solve(A) # Multiplicación matricial

```

Definiendo nuestros propios operadores binarios
=========
Además de los preestablecidos por R, nosotros podemos definir operadores binarios propios del siguiente modo:
```{r}
# Supongamos que quiero hacer un operador binario %+% que me devuelva la diferencia simétrica entre dos vectores (o conjuntos)
# Defino:
'%+%' <- function(x,y) union(setdiff(x,y), setdiff(y,x))
# Probamos:
c(1,3,4,2,6) %+% c(3,4,5,6,7)
```

Definiendo una función
===========
Además de operadores binarios, también podemos crear nuestras propias funciones del siguiente modo:
```{r}
# Crearemos una función que nos devuelva la media, mediana, sd y el vector estandarizado
stats.center <- function(x){
  list(media = mean(x), mediana = median(x), sd = sd(x), vect.stand = (x - mean(x)/sd(x)))
}
# Un ejemplo más elaborado está en la función PCA.plot, dentro de la carpeta "Otros Scripts"
```

======
Ahora probemos la función:
```{r}
u <- data$Assault
u <- stats.center(u)
u
```

=====
Veamos lo que nos regresó y guardemos cada cosa por separado.
```{r}
str(u)
media.u <- u$media
mediana.u <- u$mediana
sd.u <- u$sd
stand.u <- u$vect.stand
```

======
```{r}
media.u
mediana.u
sd.u
stand.u
```